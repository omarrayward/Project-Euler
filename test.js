// Generated by CoffeeScript 1.8.0
var integer_right_triangle, sieve, start_problem;

start_problem = function(num) {
  console.log("");
  console.log("Euler ", num);
  return console.log("");
};

sieve = function(num) {
  var ele, elem, ind, index, list_of_nums, new_index, primes, _i, _j, _len, _len1;
  list_of_nums = (function() {
    var _i, _results;
    _results = [];
    for (ele = _i = 0; 0 <= num ? _i <= num : _i >= num; ele = 0 <= num ? ++_i : --_i) {
      _results.push(true);
    }
    return _results;
  })();
  list_of_nums[0] = false;
  list_of_nums[1] = false;
  for (index = _i = 0, _len = list_of_nums.length; _i < _len; index = ++_i) {
    ele = list_of_nums[index];
    if (ele === true) {
      new_index = index;
      while (new_index < list_of_nums.length) {
        new_index += index;
        if (list_of_nums[new_index]) {
          list_of_nums[new_index] = false;
        }
      }
    }
  }
  primes = [];
  for (ind = _j = 0, _len1 = list_of_nums.length; _j < _len1; ind = ++_j) {
    elem = list_of_nums[ind];
    if (elem === true) {
      primes.push(ind);
    }
  }
  return primes;
};

start_problem(39);

integer_right_triangle = function() {
  var a, b, hip, hipotenuse, key, max, num_if_int, per, perimeter, perimeter_storage, result, _i, _j, _k, _len, _ref;
  perimeter_storage = {};
  hipotenuse = function(a, b) {
    return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
  };
  num_if_int = function(num) {
    if (Math.floor(num) === num) {
      return num;
    } else {
      return false;
    }
  };
  perimeter = function(a, b, c) {
    return a + b + c;
  };
  for (a = _i = 1; _i <= 333; a = ++_i) {
    for (b = _j = a; a <= 500 ? _j <= 500 : _j >= 500; b = a <= 500 ? ++_j : --_j) {
      hip = hipotenuse(a, b);
      per = perimeter(a, b, hip);
      if (per > 1000) {
        break;
      }
      if (num_if_int(hip)) {
        perimeter_storage[per] = perimeter_storage[per] + 1 || 1;
      }
    }
  }
  max = 0;
  result = null;
  _ref = Object.keys(perimeter_storage);
  for (_k = 0, _len = _ref.length; _k < _len; _k++) {
    key = _ref[_k];
    if (perimeter_storage[key] > max) {
      result = key;
      max = perimeter_storage[key];
    }
  }
  return result;
};

console.log(integer_right_triangle());
